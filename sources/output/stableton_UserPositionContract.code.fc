#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

() __tact_debug_str(slice value) impure asm "STRDUMP" "DROP";

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

slice __tact_context_get_sender() inline { return __tact_context_sender; }

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

slice __tact_int_to_string(int src) inline_ref {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }

    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);

        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);

        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int))) __gen_read_PoolSettings(slice sc_0) inline {
    var v'liquidationRatio = sc_0~load_uint(32);
    var v'stabilityFeeRate = sc_0~load_uint(32);
    var v'closeFactorBps = sc_0~load_uint(32);
    var v'liquidatorIncentiveBps = sc_0~load_uint(32);
    return (sc_0, (v'liquidationRatio, v'stabilityFeeRate, v'closeFactorBps, v'liquidatorIncentiveBps));
}

(slice, ((int, int))) __gen_read_DebtRate(slice sc_0) inline {
    var v'debtAccumulatedRate = sc_0~load_uint(32);
    var v'lastAccumulationTime = sc_0~load_uint(32);
    return (sc_0, (v'debtAccumulatedRate, v'lastAccumulationTime));
}

(slice, ((slice, int, (int, int, int, int), (int, int), int))) __gen_read_DepositCollateralMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3723304936);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'settings = sc_0~__gen_read_PoolSettings();
    var v'rate = sc_0~__gen_read_DebtRate();
    var v'tonPriceWithSafetyMargin = sc_0~load_coins();
    return (sc_0, (v'user, v'amount, v'settings, v'rate, v'tonPriceWithSafetyMargin));
}

(slice, ((slice, int, (int, int, int, int), (int, int), int))) __gen_read_WithdrawCollateralMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3410368520);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'settings = sc_0~__gen_read_PoolSettings();
    var v'rate = sc_0~__gen_read_DebtRate();
    var v'tonPriceWithSafetyMargin = sc_0~load_coins();
    return (sc_0, (v'user, v'amount, v'settings, v'rate, v'tonPriceWithSafetyMargin));
}

(slice, ((slice, int, (int, int, int, int), (int, int), int))) __gen_read_WithdrawStablecoinMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1815710139);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_uint(64);
    var v'settings = sc_0~__gen_read_PoolSettings();
    var v'rate = sc_0~__gen_read_DebtRate();
    var v'tonPriceWithSafetyMargin = sc_0~load_coins();
    return (sc_0, (v'user, v'amount, v'settings, v'rate, v'tonPriceWithSafetyMargin));
}

(slice, ((slice, int, (int, int, int, int), (int, int), int))) __gen_read_RepayStablecoinMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3203603975);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_uint(64);
    var v'settings = sc_0~__gen_read_PoolSettings();
    var v'rate = sc_0~__gen_read_DebtRate();
    var v'tonPriceWithSafetyMargin = sc_0~load_coins();
    return (sc_0, (v'user, v'amount, v'settings, v'rate, v'tonPriceWithSafetyMargin));
}

builder __gen_write_DoWithdrawCollateralMessage(builder build_0, (slice, int) v) inline {
    var (v'user, v'amount) = v;
    build_0 = store_uint(build_0, 3285005247, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_uint(v'amount, 64);
    return build_0;
}

cell __gen_writecell_DoWithdrawCollateralMessage((slice, int) v) inline {
    return __gen_write_DoWithdrawCollateralMessage(begin_cell(), v).end_cell();
}

builder __gen_write_IncreaseTotalStableMessage(builder build_0, (slice, int) v) inline {
    var (v'user, v'amount) = v;
    build_0 = store_uint(build_0, 2517198105, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_uint(v'amount, 64);
    return build_0;
}

cell __gen_writecell_IncreaseTotalStableMessage((slice, int) v) inline {
    return __gen_write_IncreaseTotalStableMessage(begin_cell(), v).end_cell();
}

builder __gen_write_DecreaseTotalStableMessage(builder build_0, (slice, int, int) v) inline {
    var (v'user, v'amount, v'fees) = v;
    build_0 = store_uint(build_0, 3984666698, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_uint(v'amount, 64);
    build_0 = build_0.store_uint(v'fees, 64);
    return build_0;
}

cell __gen_writecell_DecreaseTotalStableMessage((slice, int, int) v) inline {
    return __gen_write_DecreaseTotalStableMessage(begin_cell(), v).end_cell();
}

(slice, ((slice, int))) __gen_read_SetPositionIdMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1245051344);
    var v'user = sc_0~__tact_load_address();
    var v'positionId = sc_0~load_int(257);
    return (sc_0, (v'user, v'positionId));
}

builder __gen_write_NewPositionIdMessage(builder build_0, (slice) v) inline {
    var (v'user) = v;
    build_0 = store_uint(build_0, 225756565, 32);
    build_0 = __tact_store_address(build_0, v'user);
    return build_0;
}

cell __gen_writecell_NewPositionIdMessage((slice) v) inline {
    return __gen_write_NewPositionIdMessage(begin_cell(), v).end_cell();
}

builder __gen_write_SetPositionAddressMessage(builder build_0, (slice, slice) v) inline {
    var (v'user, v'position) = v;
    build_0 = store_uint(build_0, 1571217046, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = __tact_store_address(build_0, v'position);
    return build_0;
}

cell __gen_writecell_SetPositionAddressMessage((slice, slice) v) inline {
    return __gen_write_SetPositionAddressMessage(begin_cell(), v).end_cell();
}

builder __gen_write_MintMessage(builder build_0, (slice, int) v) inline {
    var (v'user, v'amount) = v;
    build_0 = store_uint(build_0, 2419415474, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell __gen_writecell_MintMessage((slice, int) v) inline {
    return __gen_write_MintMessage(begin_cell(), v).end_cell();
}

builder __gen_write_RepayBurnMessage(builder build_0, (slice, int, int) v) inline {
    var (v'user, v'amount, v'fees) = v;
    build_0 = store_uint(build_0, 2959459244, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_coins(v'fees);
    return build_0;
}

cell __gen_writecell_RepayBurnMessage((slice, int, int) v) inline {
    return __gen_write_RepayBurnMessage(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int))) __gen_read_StablecoinBurnedMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3929120156);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'fees = sc_0~load_coins();
    return (sc_0, (v'user, v'amount, v'fees));
}

builder __gen_write_UserPositionContract(builder build_0, (slice, slice, slice, int, int, int, slice) v) inline {
    var (v'user, v'stablecoinMasterAddress, v'positionsManagerAddress, v'positionId, v'collateral, v'debt, v'message) = v;
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = __tact_store_address(build_0, v'stablecoinMasterAddress);
    build_0 = __tact_store_address(build_0, v'positionsManagerAddress);
    build_0 = build_0.store_uint(v'positionId, 32);
    build_0 = build_0.store_coins(v'collateral);
    build_0 = build_0.store_uint(v'debt, 64);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'message).end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, int, int, int, slice))) __gen_read_UserPositionContract(slice sc_0) inline {
    var v'user = sc_0~__tact_load_address();
    var v'stablecoinMasterAddress = sc_0~__tact_load_address();
    var v'positionsManagerAddress = sc_0~__tact_load_address();
    var v'positionId = sc_0~load_uint(32);
    var v'collateral = sc_0~load_coins();
    var v'debt = sc_0~load_uint(64);
    var v'message = sc_0~load_ref().begin_parse();
    return (sc_0, (v'user, v'stablecoinMasterAddress, v'positionsManagerAddress, v'positionId, v'collateral, v'debt, v'message));
}

(int, int) __gen_PositionState_to_external(((int, int)) v) inline {
    var (v'collateral, v'debt) = v; 
    return (v'collateral, v'debt);
}

(slice, ((slice, slice, slice))) __gen_read_$init$UserPositionContract(slice sc_0) inline {
    var v'user = sc_0~__tact_load_address();
    var v'stablecoinMasterAddress = sc_0~__tact_load_address();
    var v'positionsManagerAddress = sc_0~__tact_load_address();
    return (sc_0, (v'user, v'stablecoinMasterAddress, v'positionsManagerAddress));
}

builder __gen_write_$init$PositionAddressContract(builder build_0, (int, slice) v) inline {
    var (v'id, v'positionsManagerAddress) = v;
    build_0 = build_0.store_int(v'id, 257);
    build_0 = __tact_store_address(build_0, v'positionsManagerAddress);
    return build_0;
}

;; String "Position created"
slice __gen_str_3995992330() asm "B{b5ee9c72410101010012000020506f736974696f6e20637265617465643b4db9f3} B>boc <s PUSHSLICE";

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((slice)) __gen_constructor_NewPositionIdMessage$user(slice user) inline {
    return (user);
}

(slice, slice, slice, int, int, int, slice) $__gen_UserPositionContract_init(slice $user, slice $stablecoinMasterAddress, slice $positionsManagerAddress) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = (null(), null(), null(), 0, 0, 0, null());
    $self'user = $user;
    $self'stablecoinMasterAddress = $stablecoinMasterAddress;
    $self'positionsManagerAddress = $positionsManagerAddress;
    $self'message = __gen_str_3995992330();
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'positionsManagerAddress, 100000000, 2, true, __gen_writecell_NewPositionIdMessage(__gen_constructor_NewPositionIdMessage$user($user))));
    return ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message);
}

(slice, slice, slice, int, int, int, slice) __gen_load_UserPositionContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_UserPositionContract();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice user, slice stablecoinMasterAddress, slice positionsManagerAddress) = $sc~__gen_read_$init$UserPositionContract();
        $sc.end_parse();
        return $__gen_UserPositionContract_init(user, stablecoinMasterAddress, positionsManagerAddress);
    }
}

() __gen_store_UserPositionContract((slice, slice, slice, int, int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_UserPositionContract(b, v);
    set_data(b.end_cell());
}

;; String "Collateral added"
slice __gen_str_1813105158() asm "B{b5ee9c72410101010012000020436f6c6c61746572616c206164646564255e4d6d} B>boc <s PUSHSLICE";

;; String "Stablecoins sent"
slice __gen_str_3523040537() asm "B{b5ee9c72410101010012000020537461626c65636f696e732073656e74e8a66862} B>boc <s PUSHSLICE";

;; String "collateral"
slice __gen_str_1427729246() asm "B{b5ee9c7241010101000c000014636f6c6c61746572616c2076e1ca} B>boc <s PUSHSLICE";

;; String "collateral * tonPriceWithSafetyMargin"
slice __gen_str_1844202114() asm "B{b5ee9c7241010101002700004a636f6c6c61746572616c202a20746f6e5072696365576974685361666574794d617267696e3cbc85a5} B>boc <s PUSHSLICE";

;; String "debt"
slice __gen_str_1697478137() asm "B{b5ee9c72410101010006000008646562742fe16b04} B>boc <s PUSHSLICE";

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

() $reply(cell $body) impure inline_ref {
    $send(__gen_constructor_SendParameters$bounce_to_value_mode_body(true, __tact_context_get_sender(), 0, (64 + 2), $body));
}

((slice, slice, slice, int, int, int, slice), int) $__gen_UserPositionContract_isPositionHealthy((slice, slice, slice, int, int, int, slice) $self, int $collateral, int $debt, int $tonPriceWithSafetyMargin) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = $self;
    __tact_debug_str(__gen_str_1427729246());
    __tact_debug_str(__tact_int_to_string($collateral));
    __tact_debug_str(__gen_str_1844202114());
    __tact_debug_str(__tact_int_to_string(($collateral * $tonPriceWithSafetyMargin)));
    __tact_debug_str(__gen_str_1697478137());
    __tact_debug_str(__tact_int_to_string($debt));
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ((($collateral * $tonPriceWithSafetyMargin) / 1000000000) >= $debt));
}

slice $__gen_UserPositionContract_getPositionUser((slice, slice, slice, int, int, int, slice) $self) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = $self;
    return $self'user;
}

_ $__gen_get_getPositionUser() method_id(117072) {
    var self = __gen_load_UserPositionContract();
    var res = $__gen_UserPositionContract_getPositionUser(self);
    return res;
}

int $__gen_UserPositionContract_getPositionId((slice, slice, slice, int, int, int, slice) $self) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = $self;
    return $self'positionId;
}

_ $__gen_get_getPositionId() method_id(125131) {
    var self = __gen_load_UserPositionContract();
    var res = $__gen_UserPositionContract_getPositionId(self);
    return res;
}

((int, int)) __gen_constructor_PositionState$collateral_debt(int collateral, int debt) inline {
    return (collateral, debt);
}

(int, int) $__gen_UserPositionContract_getPositionState((slice, slice, slice, int, int, int, slice) $self) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = $self;
    return __gen_constructor_PositionState$collateral_debt($self'collateral, $self'debt);
}

_ $__gen_get_getPositionState() method_id(118440) {
    var self = __gen_load_UserPositionContract();
    var res = $__gen_UserPositionContract_getPositionState(self);
    return __gen_PositionState_to_external(res);
}

slice $__gen_UserPositionContract_getMessage((slice, slice, slice, int, int, int, slice) $self) impure inline_ref {
    var (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)) = $self;
    return $self'message;
}

_ $__gen_get_getMessage() method_id(91266) {
    var self = __gen_load_UserPositionContract();
    var res = $__gen_UserPositionContract_getMessage(self);
    return res;
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_DepositCollateralMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int, (int, int, int, int), (int, int), int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'amount, ($msg'settings'liquidationRatio, $msg'settings'stabilityFeeRate, $msg'settings'closeFactorBps, $msg'settings'liquidatorIncentiveBps), ($msg'rate'debtAccumulatedRate, $msg'rate'lastAccumulationTime), $msg'tonPriceWithSafetyMargin) = $msg;
    throw_unless(61910, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    $self'collateral = ($self'collateral + $msg'amount);
    $send(__gen_constructor_SendParameters$to_bounce_value_mode($msg'user, false, 0, (64 + 2)));
    $self'message = __gen_str_1813105158();
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((slice, slice)) __gen_constructor_SetPositionAddressMessage$user_position(slice user, slice position) inline {
    return (user, position);
}

(cell, cell) $__gen_PositionAddressContract_init_child(cell sys', int $id, slice $positionsManagerAddress) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PositionAddressContract
    cell mine = __tact_dict_get_code(source, 63327);
    contracts = __tact_dict_set_code(contracts, 63327, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$PositionAddressContract(b, ($id, $positionsManagerAddress));
    return (mine, b.end_cell());
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_SetPositionIdMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'positionId) = $msg;
    throw_unless(61910, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    $self'positionId = $msg'positionId;
    var ($init'code, $init'data) = $__gen_PositionAddressContract_init_child(__tact_context_sys, $self'positionId, $self'positionsManagerAddress);
    slice $positionAddress = $contractAddress(($init'code, $init'data));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body_code_data($positionAddress, 0, (64 + 2), true, __gen_writecell_SetPositionAddressMessage(__gen_constructor_SetPositionAddressMessage$user_position($msg'user, my_address())), $init'code, $init'data));
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((slice, int)) __gen_constructor_MintMessage$user_amount(slice user, int amount) inline {
    return (user, amount);
}

((slice, int)) __gen_constructor_IncreaseTotalStableMessage$user_amount(slice user, int amount) inline {
    return (user, amount);
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_WithdrawStablecoinMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int, (int, int, int, int), (int, int), int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'amount, ($msg'settings'liquidationRatio, $msg'settings'stabilityFeeRate, $msg'settings'closeFactorBps, $msg'settings'liquidatorIncentiveBps), ($msg'rate'debtAccumulatedRate, $msg'rate'lastAccumulationTime), $msg'tonPriceWithSafetyMargin) = $msg;
    throw_unless(61910, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    int $debtAfterWithdraw = (($self'debt * $msg'rate'debtAccumulatedRate) + $msg'amount);
    throw_unless(43504, ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message)~$__gen_UserPositionContract_isPositionHealthy($self'collateral, $debtAfterWithdraw, $msg'tonPriceWithSafetyMargin));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'stablecoinMasterAddress, 100000000, 2, true, __gen_writecell_MintMessage(__gen_constructor_MintMessage$user_amount($msg'user, $msg'amount))));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'positionsManagerAddress, 0, (64 + 2), true, __gen_writecell_IncreaseTotalStableMessage(__gen_constructor_IncreaseTotalStableMessage$user_amount($msg'user, $msg'amount))));
    $self'debt = ($self'debt + (($msg'amount * 1000000000) / $msg'rate'debtAccumulatedRate));
    $self'message = __gen_str_3523040537();
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((slice, int, int)) __gen_constructor_RepayBurnMessage$user_amount_fees(slice user, int amount, int fees) inline {
    return (user, amount, fees);
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_RepayStablecoinMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int, (int, int, int, int), (int, int), int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'amount, ($msg'settings'liquidationRatio, $msg'settings'stabilityFeeRate, $msg'settings'closeFactorBps, $msg'settings'liquidatorIncentiveBps), ($msg'rate'debtAccumulatedRate, $msg'rate'lastAccumulationTime), $msg'tonPriceWithSafetyMargin) = $msg;
    throw_unless(61910, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    throw_unless(31797, ($self'debt >= $msg'amount));
    int $amountToBurn = $msg'amount;
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'stablecoinMasterAddress, 500000000, 2, true, __gen_writecell_RepayBurnMessage(__gen_constructor_RepayBurnMessage$user_amount_fees($msg'user, $amountToBurn, 1))));
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((slice, int, int)) __gen_constructor_DecreaseTotalStableMessage$user_amount_fees(slice user, int amount, int fees) inline {
    return (user, amount, fees);
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_StablecoinBurnedMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int, int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'amount, $msg'fees) = $msg;
    throw_unless(15032, __tact_address_eq(__tact_context_get_sender(), $self'stablecoinMasterAddress));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'positionsManagerAddress, 400000000, 2, true, __gen_writecell_DecreaseTotalStableMessage(__gen_constructor_DecreaseTotalStableMessage$user_amount_fees($msg'user, $msg'amount, $msg'fees))));
    $self'debt = ($self'debt - $msg'amount);
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((slice, int)) __gen_constructor_DoWithdrawCollateralMessage$user_amount(slice user, int amount) inline {
    return (user, amount);
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_WithdrawCollateralMessage((slice, slice, slice, int, int, int, slice) $self, (slice, int, (int, int, int, int), (int, int), int) $msg) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($msg'user, $msg'amount, ($msg'settings'liquidationRatio, $msg'settings'stabilityFeeRate, $msg'settings'closeFactorBps, $msg'settings'liquidatorIncentiveBps), ($msg'rate'debtAccumulatedRate, $msg'rate'lastAccumulationTime), $msg'tonPriceWithSafetyMargin) = $msg;
    throw_unless(53160, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    throw_unless(63577, ($msg'amount <= $self'collateral));
    $self'collateral = ($self'collateral - $msg'amount);
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($self'positionsManagerAddress, 100000000, 2, true, __gen_writecell_DoWithdrawCollateralMessage(__gen_constructor_DoWithdrawCollateralMessage$user_amount($msg'user, $msg'amount))));
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

(((slice, slice, slice, int, int, int, slice)), ()) $__gen_UserPositionContract_receive_Deploy((slice, slice, slice, int, int, int, slice) $self, (int) $deploy) impure inline {
    var ($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'user, $self'stablecoinMasterAddress, $self'positionsManagerAddress, $self'positionId, $self'collateral, $self'debt, $self'message), ());
}

((slice, slice, slice, int, int, int, slice), int) __gen_router_UserPositionContract((slice, slice, slice, int, int, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive DepositCollateralMessage message
    if (op == 3723304936) {
        var msg = in_msg~__gen_read_DepositCollateralMessage();
        self~$__gen_UserPositionContract_receive_DepositCollateralMessage(msg);
        return (self, true);
    }
    
    ;; Receive SetPositionIdMessage message
    if (op == 1245051344) {
        var msg = in_msg~__gen_read_SetPositionIdMessage();
        self~$__gen_UserPositionContract_receive_SetPositionIdMessage(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawStablecoinMessage message
    if (op == 1815710139) {
        var msg = in_msg~__gen_read_WithdrawStablecoinMessage();
        self~$__gen_UserPositionContract_receive_WithdrawStablecoinMessage(msg);
        return (self, true);
    }
    
    ;; Receive RepayStablecoinMessage message
    if (op == 3203603975) {
        var msg = in_msg~__gen_read_RepayStablecoinMessage();
        self~$__gen_UserPositionContract_receive_RepayStablecoinMessage(msg);
        return (self, true);
    }
    
    ;; Receive StablecoinBurnedMessage message
    if (op == 3929120156) {
        var msg = in_msg~__gen_read_StablecoinBurnedMessage();
        self~$__gen_UserPositionContract_receive_StablecoinBurnedMessage(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawCollateralMessage message
    if (op == 3410368520) {
        var msg = in_msg~__gen_read_WithdrawCollateralMessage();
        self~$__gen_UserPositionContract_receive_WithdrawCollateralMessage(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_UserPositionContract_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_UserPositionContract();
    
    ;; Handle operation
    int handled = self~__gen_router_UserPositionContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_UserPositionContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmPYVFyKZSMfFo3Bke96ZQxPiHajendB7D9nZ9i2hcgRL7";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
