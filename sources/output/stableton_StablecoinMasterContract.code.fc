#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    __tact_verify_address(raw);
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        b = b.store_uint(0, 2);
        return b;
    } else {
        return __tact_store_address(b, address);
    }
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    return b.end_cell().begin_parse();
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

(slice, ((slice, int))) __gen_read_MintFeesMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2638369821);
    var v'to = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'to, v'amount));
}

builder __gen_write_TokenTransferInternal(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'from, v'responseAddress, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address_opt(build_0, v'responseAddress);
    build_0 = build_0.store_coins(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell __gen_writecell_TokenTransferInternal((int, int, slice, slice, int, slice) v) inline {
    return __gen_write_TokenTransferInternal(begin_cell(), v).end_cell();
}

(slice, ((slice, int))) __gen_read_MintMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3872727887);
    var v'to = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'to, v'amount));
}

(slice, ((slice, int, int))) __gen_read_BurnMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2772984165);
    var v'address = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'fees = sc_0~load_coins();
    return (sc_0, (v'address, v'amount, v'fees));
}

(slice, ((slice, int))) __gen_read_RepayBurnNotification(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1446800788);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'user, v'amount));
}

builder __gen_write_StablecoinMasterContract(builder build_0, (int, int, slice, cell) v) inline {
    var (v'totalSupply, v'mintable, v'owner, v'content) = v;
    build_0 = build_0.store_coins(v'totalSupply);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = ~ null?(v'content) ? build_0.store_int(true, 1).store_ref(v'content) : build_0.store_int(false, 1);
    return build_0;
}

(slice, ((int, int, slice, cell))) __gen_read_StablecoinMasterContract(slice sc_0) inline {
    var v'totalSupply = sc_0~load_coins();
    var v'mintable = sc_0~load_int(1);
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'totalSupply, v'mintable, v'owner, v'content));
}

_ __gen_StateInit_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

(int, int, slice, cell, cell) __gen_JettonData_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'totalSupply, v'mintable, v'owner, v'content, v'walletCode) = v; 
    return (v'totalSupply, v'mintable, v'owner, v'content, v'walletCode);
}

builder __gen_write_$init$StablecoinJetton(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(slice, ((slice, cell))) __gen_read_$init$StablecoinMasterContract(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    return (sc_0, (v'owner, v'content));
}

(int, int, slice, cell) $__gen_StablecoinMasterContract_init(slice $owner, cell $content) impure inline_ref {
    var (($self'totalSupply, $self'mintable, $self'owner, $self'content)) = (0, true, null(), null());
    $self'owner = $owner;
    $self'content = $content;
    return ($self'totalSupply, $self'mintable, $self'owner, $self'content);
}

(int, int, slice, cell) __gen_load_StablecoinMasterContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_StablecoinMasterContract();
    } else {
        (slice owner, cell content) = $sc~__gen_read_$init$StablecoinMasterContract();
        $sc.end_parse();
        return $__gen_StablecoinMasterContract_init(owner, content);
    }
}

() __gen_store_StablecoinMasterContract((int, int, slice, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_StablecoinMasterContract(b, v);
    set_data(b.end_cell());
}

cell $emptyCell() impure inline_ref {
    return end_cell(begin_cell());
}

slice $__gen_Cell_asSlice(cell $self) impure inline_ref {
    var ($self) = $self;
    return begin_parse($self);
}

slice $emptySlice() impure inline_ref {
    return $__gen_Cell_asSlice($emptyCell());
}

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

() $reply(cell $body) impure inline_ref {
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $send(__gen_constructor_SendParameters$bounce_to_value_mode_body(true, $ctx'sender, 0, (64 + 2), $body));
}

(cell, cell) $__gen_StablecoinJetton_init_child(cell sys', slice $master, slice $owner) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: StablecoinJetton
    cell mine = __tact_dict_get_code(source, 54331);
    contracts = __tact_dict_set_code(contracts, 54331, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$StablecoinJetton(b, ($master, $owner));
    return (mine, b.end_cell());
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

((int, int, slice, cell), (cell, cell)) $__gen_StablecoinMasterContract_getJettonWalletInit((int, int, slice, cell) $self, slice $address) impure inline_ref {
    var (($self'totalSupply, $self'mintable, $self'owner, $self'content)) = $self;
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), $__gen_StablecoinJetton_init_child(__tact_context_sys, my_address(), $address));
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, int, slice, slice, int, slice)) __gen_constructor_TokenTransferInternal$amount_queryId_from_responseAddress_forwardTonAmount_forwardPayload(int amount, int queryId, slice from, slice responseAddress, int forwardTonAmount, slice forwardPayload) inline {
    return (queryId, amount, from, responseAddress, forwardTonAmount, forwardPayload);
}

((int, int, slice, cell), ()) $__gen_StablecoinMasterContract_mint((int, int, slice, cell) $self, slice $to, int $amount) impure inline_ref {
    var (($self'totalSupply, $self'mintable, $self'owner, $self'content)) = $self;
    $self'totalSupply = ($self'totalSupply + $amount);
    var ($winit'code, $winit'data) = ($self'totalSupply, $self'mintable, $self'owner, $self'content)~$__gen_StablecoinMasterContract_getJettonWalletInit($to);
    slice $walletAddress = $contractAddress(($winit'code, $winit'data));
    $send(__gen_constructor_SendParameters$to_value_bounce_mode_body_code_data($walletAddress, 0, false, 64, __gen_writecell_TokenTransferInternal(__gen_constructor_TokenTransferInternal$amount_queryId_from_responseAddress_forwardTonAmount_forwardPayload($amount, 0, my_address(), my_address(), 0, $emptySlice())), $winit'code, $winit'data));
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

slice $__gen_StablecoinMasterContract_get_wallet_address((int, int, slice, cell) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'mintable, $self'owner, $self'content)) = $self;
    var ($winit'code, $winit'data) = ($self'totalSupply, $self'mintable, $self'owner, $self'content)~$__gen_StablecoinMasterContract_getJettonWalletInit($owner);
    return $contractAddress(($winit'code, $winit'data));
}

_ $__gen_get_get_wallet_address(slice $$owner) method_id(103289) {
    slice $owner = $$owner;
    var self = __gen_load_StablecoinMasterContract();
    var res = $__gen_StablecoinMasterContract_get_wallet_address(self, $owner);
    return res;
}

((int, int, slice, cell, cell)) __gen_constructor_JettonData$totalSupply_mintable_owner_content_walletCode(int totalSupply, int mintable, slice owner, cell content, cell walletCode) inline {
    return (totalSupply, mintable, owner, content, walletCode);
}

(int, int, slice, cell, cell) $__gen_StablecoinMasterContract_get_jetton_data((int, int, slice, cell) $self) impure inline_ref {
    var (($self'totalSupply, $self'mintable, $self'owner, $self'content)) = $self;
    cell $code = __gen_StateInit_get_code(($self'totalSupply, $self'mintable, $self'owner, $self'content)~$__gen_StablecoinMasterContract_getJettonWalletInit(my_address()));
    return __gen_constructor_JettonData$totalSupply_mintable_owner_content_walletCode($self'totalSupply, $self'mintable, $self'owner, $self'content, $code);
}

_ $__gen_get_get_jetton_data() method_id(106029) {
    var self = __gen_load_StablecoinMasterContract();
    var res = $__gen_StablecoinMasterContract_get_jetton_data(self);
    return __gen_JettonData_to_external(res);
}

(((int, int, slice, cell)), ()) $__gen_StablecoinMasterContract_receive_MintMessage((int, int, slice, cell) $self, (slice, int) $msg) impure inline {
    var ($self'totalSupply, $self'mintable, $self'owner, $self'content) = $self;
    var ($msg'to, $msg'amount) = $msg;
    ($self'totalSupply, $self'mintable, $self'owner, $self'content)~$__gen_StablecoinMasterContract_mint($msg'to, $msg'amount);
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

(((int, int, slice, cell)), ()) $__gen_StablecoinMasterContract_receive_BurnMessage((int, int, slice, cell) $self, (slice, int, int) $msg) impure inline {
    var ($self'totalSupply, $self'mintable, $self'owner, $self'content) = $self;
    var ($msg'address, $msg'amount, $msg'fees) = $msg;
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

(((int, int, slice, cell)), ()) $__gen_StablecoinMasterContract_receive_RepayBurnNotification((int, int, slice, cell) $self, (slice, int) $msg) impure inline {
    var ($self'totalSupply, $self'mintable, $self'owner, $self'content) = $self;
    var ($msg'user, $msg'amount) = $msg;
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

(((int, int, slice, cell)), ()) $__gen_StablecoinMasterContract_receive_MintFeesMessage((int, int, slice, cell) $self, (slice, int) $msg) impure inline {
    var ($self'totalSupply, $self'mintable, $self'owner, $self'content) = $self;
    var ($msg'to, $msg'amount) = $msg;
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

(((int, int, slice, cell)), ()) $__gen_StablecoinMasterContract_receive_Deploy((int, int, slice, cell) $self, (int) $deploy) impure inline {
    var ($self'totalSupply, $self'mintable, $self'owner, $self'content) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'totalSupply, $self'mintable, $self'owner, $self'content), ());
}

((int, int, slice, cell), int) __gen_router_StablecoinMasterContract((int, int, slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive MintMessage message
    if (op == 3872727887) {
        var msg = in_msg~__gen_read_MintMessage();
        self~$__gen_StablecoinMasterContract_receive_MintMessage(msg);
        return (self, true);
    }
    
    ;; Receive BurnMessage message
    if (op == 2772984165) {
        var msg = in_msg~__gen_read_BurnMessage();
        self~$__gen_StablecoinMasterContract_receive_BurnMessage(msg);
        return (self, true);
    }
    
    ;; Receive RepayBurnNotification message
    if (op == 1446800788) {
        var msg = in_msg~__gen_read_RepayBurnNotification();
        self~$__gen_StablecoinMasterContract_receive_RepayBurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive MintFeesMessage message
    if (op == 2638369821) {
        var msg = in_msg~__gen_read_MintFeesMessage();
        self~$__gen_StablecoinMasterContract_receive_MintFeesMessage(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_StablecoinMasterContract_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Load contract data
    var self = __gen_load_StablecoinMasterContract();
    
    ;; Handle operation
    int handled = self~__gen_router_StablecoinMasterContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_StablecoinMasterContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://Qmd2V42zibVBKxYABgRZz8DRb9majDAkJm1T81SYo4tx4R";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
