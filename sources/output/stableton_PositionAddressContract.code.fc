#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;



slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

slice __tact_context_get_sender() inline { return __tact_context_sender; }

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

(slice, ((slice, slice))) __gen_read_SetPositionAddressMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1571217046);
    var v'user = sc_0~__tact_load_address();
    var v'position = sc_0~__tact_load_address();
    return (sc_0, (v'user, v'position));
}

builder __gen_write_PositionAddressContract(builder build_0, (int, slice, slice) v) inline {
    var (v'id, v'positionAddress, v'positionsManagerAddress) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = __tact_store_address(build_0, v'positionAddress);
    build_0 = __tact_store_address(build_0, v'positionsManagerAddress);
    return build_0;
}

(slice, ((int, slice, slice))) __gen_read_PositionAddressContract(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'positionAddress = sc_0~__tact_load_address();
    var v'positionsManagerAddress = sc_0~__tact_load_address();
    return (sc_0, (v'id, v'positionAddress, v'positionsManagerAddress));
}

(slice, ((int))) __gen_read_$init$PositionAddressContract(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(int, slice, slice) $__gen_PositionAddressContract_init(int $id) impure inline_ref {
    var (($self'id, $self'positionAddress, $self'positionsManagerAddress)) = (null(), null(), null());
    $self'id = $id;
    $self'positionAddress = __tact_create_address(0, 0);
    $self'positionsManagerAddress = __tact_context_get_sender();
    return ($self'id, $self'positionAddress, $self'positionsManagerAddress);
}

(int, slice, slice) __gen_load_PositionAddressContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_PositionAddressContract();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id) = $sc~__gen_read_$init$PositionAddressContract();
        $sc.end_parse();
        return $__gen_PositionAddressContract_init(id);
    }
}

() __gen_store_PositionAddressContract((int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_PositionAddressContract(b, v);
    set_data(b.end_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

() $reply(cell $body) impure inline_ref {
    $send(__gen_constructor_SendParameters$bounce_to_value_mode_body(true, __tact_context_get_sender(), 0, (64 + 2), $body));
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

slice $__gen_PositionAddressContract_getPositionAddress((int, slice, slice) $self) impure inline_ref {
    var (($self'id, $self'positionAddress, $self'positionsManagerAddress)) = $self;
    return $self'positionAddress;
}

_ $__gen_get_getPositionAddress() method_id(88981) {
    var self = __gen_load_PositionAddressContract();
    var res = $__gen_PositionAddressContract_getPositionAddress(self);
    return res;
}

(((int, slice, slice)), ()) $__gen_PositionAddressContract_receive_SetPositionAddressMessage((int, slice, slice) $self, (slice, slice) $msg) impure inline {
    var ($self'id, $self'positionAddress, $self'positionsManagerAddress) = $self;
    var ($msg'user, $msg'position) = $msg;
    throw_unless(4429, __tact_address_eq(__tact_context_get_sender(), $self'positionsManagerAddress));
    throw_unless(22230, __tact_address_eq($self'positionAddress, __tact_create_address(0, 0)));
    $self'positionAddress = $msg'position;
    __tact_nop();
    $send(__gen_constructor_SendParameters$to_bounce_value_mode($msg'user, false, 0, (64 + 2)));
    return (($self'id, $self'positionAddress, $self'positionsManagerAddress), ());
}

(((int, slice, slice)), ()) $__gen_PositionAddressContract_receive_Deploy((int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'id, $self'positionAddress, $self'positionsManagerAddress) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'id, $self'positionAddress, $self'positionsManagerAddress), ());
}

((int, slice, slice), int) __gen_router_PositionAddressContract((int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive SetPositionAddressMessage message
    if (op == 1571217046) {
        var msg = in_msg~__gen_read_SetPositionAddressMessage();
        self~$__gen_PositionAddressContract_receive_SetPositionAddressMessage(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_PositionAddressContract_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_PositionAddressContract();
    
    ;; Handle operation
    int handled = self~__gen_router_PositionAddressContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_PositionAddressContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmNMssU9pticXB1PQUqyCSm5DT7qFEdxnSnmzFGsJdbVhy";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
