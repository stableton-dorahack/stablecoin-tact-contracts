#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

builder __gen_write_TestContract(builder build_0, (slice) v) inline {
    var (v'user) = v;
    build_0 = __tact_store_address(build_0, v'user);
    return build_0;
}

(slice, ((slice))) __gen_read_TestContract(slice sc_0) inline {
    var v'user = sc_0~__tact_load_address();
    return (sc_0, (v'user));
}

(slice, ((slice))) __gen_read_$init$TestContract(slice sc_0) inline {
    var v'user = sc_0~__tact_load_address();
    return (sc_0, (v'user));
}

(slice) $__gen_TestContract_init(slice $user) impure inline_ref {
    var (($self'user)) = (null());
    $self'user = $user;
    return ($self'user);
}

(slice) __gen_load_TestContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_TestContract();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice user) = $sc~__gen_read_$init$TestContract();
        $sc.end_parse();
        return $__gen_TestContract_init(user);
    }
}

() __gen_store_TestContract((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_TestContract(b, v);
    set_data(b.end_cell());
}

((slice), ()) $__gen_TestContract_receive_comment_f9b941877628a233a719e129140e93df1eeb5a65aeea5fbd16fb0b9af4004c94((slice) $self) impure inline {
    var ($self'user) = $self;
    return (($self'user), ());
}

((slice), int) __gen_router_TestContract((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "test" message
        if (text_op == 0xf9b941877628a233a719e129140e93df1eeb5a65aeea5fbd16fb0b9af4004c94) {
            self~$__gen_TestContract_receive_comment_f9b941877628a233a719e129140e93df1eeb5a65aeea5fbd16fb0b9af4004c94();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_TestContract();
    
    ;; Handle operation
    int handled = self~__gen_router_TestContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_TestContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmS2bU65hnTzPov71usy58uNb1bSwokzdytP1PRQUqNnm2";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
